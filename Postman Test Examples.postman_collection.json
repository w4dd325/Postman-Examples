{
	"info": {
		"_postman_id": "e34bec43-e623-41e8-adfb-64960a28e705",
		"name": "Postman Test Examples",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Status code check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Response time check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check data type of a response value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData.category.name).to.be.a(\"string\");\r",
							"    //other options to use;\r",
							"    //pm.expect(jsonData).to.be.an(\"object\");\r",
							"    //pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    //pm.expect(jsonData.age).to.be.a(\"number\");\r",
							"    //pm.expect(jsonData.hobbies).to.be.an(\"array\");\r",
							"    //pm.expect(jsonData.website).to.be.undefined;\r",
							"    //pm.expect(jsonData.email).to.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check value against list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Value is in valid list\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.category.name).to.be.oneOf([\"string\", \"test\", \"exmple\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check JSON values in response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check JSON values\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    //Example of top level\r",
							"    pm.expect(jsonData.id).to.eql(0);\r",
							"    //Example of first indent level\r",
							"    pm.expect(jsonData.category.name).to.eql(\"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Body response includes a value check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body response includes the string, doggie\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"doggie\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Headers exists check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Following headers are all present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.response.to.have.header(\"Content-Length\");\r",
							"    pm.response.to.have.header(\"Connection\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Credentials\");\r",
							"    pm.response.to.have.header(\"Content-Encoding\");\r",
							"    pm.response.to.have.header(\"Server\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Headers to have value check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const moment = require('moment');\r",
							"let now = (moment().format(\"ddd, DD MMM YYYY HH:mm:ss \")+\"GMT\")\r",
							"\r",
							"pm.test(\"Check all headers return with correct values\", () => {\r",
							"    pm.expect(pm.response.headers.get('Date')).to.eql(now);\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"    pm.expect(pm.response.headers.get('Content-Length')).to.eql('125');\r",
							"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
							"    pm.expect(pm.response.headers.get('Access-Control-Allow-Headers')).to.eql('X-Requested-With,Content-Type,Accept,Origin');\r",
							"    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
							"    pm.expect(pm.response.headers.get('Access-Control-Allow-Methods')).to.eql('*');\r",
							"    pm.expect(pm.response.headers.get('Access-Control-Allow-Credentials')).to.eql('true');\r",
							"    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('gzip');\r",
							"    pm.expect(pm.response.headers.get('Server')).to.eql('Jetty(9.4.29.v20200521)');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "If statement example",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"if (jsonData.category.name) {\r",
							"    console.log(\"name was found!\");\r",
							"    // do something\r",
							"} else {\r",
							"    console.log(\"no name ...\");\r",
							"    //do something else\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Try and catch example",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const x = Math.random(); \r",
							"//console.log('x=' + x);\r",
							"try{\r",
							"    pm.expect(x).to.be.below(0.5,\"was not below 0.5\");\r",
							"    pm.test(\"Pass - it was less than 0.5\", () => true); // this will only execute if no exception raised\r",
							"}catch(e){\r",
							"    pm.test(\"FAIL - it was more than 0.5\", () => {throw new Error(e.message)}); \r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check field value in response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API response contains the expected fields\", () => {\r",
							"  const response = pm.response.json();\r",
							"\r",
							"  pm.expect(response).to.have.property(\"id\", 0);\r",
							"  pm.expect(response).to.have.property(\"name\", \"doggie\");\r",
							"  pm.expect(response).to.have.property(\"status\", \"available\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check nested field value in response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API response contains the expected fields\", () => {\r",
							"  const response = pm.response.json();\r",
							"  pm.expect(response).to.have.nested.property(\"category.name\", \"astring\");  \r",
							"  pm.expect(response).to.have.nested.property(\"category.id\", 0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Try and catch to allow continue on test fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API response contains all of the expected fields\", () => {\r",
							"\r",
							"//Parse response and save as variable\r",
							"const response = pm.response.json(); \r",
							"let count = 0;\r",
							"\r",
							"    //Tests to PASS\r",
							"    try{pm.expect(response).to.have.property(\"status\", \"available\");\r",
							"    }catch(e){pm.test(\"Check status value\", () => {throw new Error(e.message)}), count++;}\r",
							"\r",
							"    try{pm.expect(response).to.have.nested.property(\"category.id\", 0);\r",
							"    }catch(e){pm.test(\"Check category.id value\", () => {throw new Error(e.message)}), count++;}\r",
							"\r",
							"    try{pm.expect(response).to.have.property(\"id\", 0);\r",
							"    }catch(e){pm.test(\"Check id value\", () => {throw new Error(e.message)}), count++;}\r",
							"\r",
							"    //Tests to FAIL with WRONG DATA\r",
							"    try{pm.expect(response).to.have.property(\"name\", \"WRONG DATA\");\r",
							"    }catch(e){pm.test(\"Check name value\", () => {throw new Error(e.message)}), count++;}\r",
							"        \r",
							"    try{pm.expect(response).to.have.nested.property(\"category.name\", \"WRONG DATA\");  \r",
							"    }catch(e){pm.test(\"Check category.name value\", () => {throw new Error(e.message)}), count++;}\r",
							"\r",
							"    //Count how many tests above fail, and fail the test case using pm.expect.fail if there is 1 or more failures\r",
							"    if(count > 0) {\r",
							"        pm.expect.fail(\"There are \" + count + \" failures within the above checks, please check...\")\r",
							"    } \r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Schema validation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"category\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"photoUrls\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    },\r",
							"    \"tags\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"name\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"name\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    },\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"category\",\r",
							"    \"name\",\r",
							"    \"photoUrls\",\r",
							"    \"tags\",\r",
							"    \"status\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Validating the API schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Count items in array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Number of items in tags array = \" + jsonData.tags.length);\r",
							"//Or output to console...\r",
							"console.log(\"Number of items in tags array = \" + jsonData.tags.length);\r",
							"\r",
							"//--------------------------------------------------------------------------\r",
							"\r",
							"//Or count and check against expected number like so;\r",
							"pm.test(\"Is array \" + jsonData.tags.length + \" item(s) long?\", function () {\r",
							"    pm.expect(jsonData.tags.length).to.equal(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "For each in array with if",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"\r",
							"for (let i = 0; i < response.tags.length; i++) {\r",
							"    console.log(\"value is \" + response.tags[i].name + \" and index is \" + i)\r",
							"    if(response.tags[i].name === \"string\"){\r",
							"        console.log(\"IF STRING = value is \" + response.tags[i].name + \" and index is \" + i)\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Base64 Encode and Decode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json().category.name;\r",
							"//Encode value\r",
							"var encodedMessage = btoa(response);\r",
							"console.log(encodedMessage);\r",
							"//Decode value\r",
							"var decodedMessage = atob(encodedMessage);\r",
							"console.log(decodedMessage);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://virtserver.swaggerhub.com/w4dd325/test/1.0.0/pet/0",
					"protocol": "https",
					"host": [
						"virtserver",
						"swaggerhub",
						"com"
					],
					"path": [
						"w4dd325",
						"test",
						"1.0.0",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find in response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Find completes on the first occurance found.\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Result has Mr\", () => {\r",
							"    let result = jsonData.results.find(a => a.name.title === \"Mr\")\r",
							"    pm.expect(result.name.title).to.eql(\"Mr\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://randomuser.me/api/",
					"protocol": "https",
					"host": [
						"randomuser",
						"me"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter in response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Filter returns all occurances found.\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Use filter to count all US alpha_two_codes\", () => {\r",
							"    let result = jsonData.filter(a => a.alpha_two_code === \"US\")\r",
							"    console.log(result.length)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://universities.hipolabs.com/search?country=United+States",
					"protocol": "http",
					"host": [
						"universities",
						"hipolabs",
						"com"
					],
					"path": [
						"search"
					],
					"query": [
						{
							"key": "country",
							"value": "United+States"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "OR",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"console.log(jsonData.results[0].name.title);\r",
							"\r",
							"const hasItemDetails = (jsonData.results[0].name.title.includes('Mr') \r",
							"    || jsonData.results[0].name.title.includes('Mrs'));\r",
							"\r",
							"pm.test(\"Is Mr OR Mrs\", function () {\r",
							"    pm.expect(hasItemDetails).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://randomuser.me/api/",
					"protocol": "https",
					"host": [
						"randomuser",
						"me"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "AND",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(jsonData.results[0].name.title);\r",
							"console.log(jsonData.results[0].gender);\r",
							"\r",
							"//Check the condition and save as Bool value\r",
							"const hasItemDetails = (jsonData.results[0].name.title.includes('Miss') \r",
							"    && jsonData.results[0].gender.includes(\"female\"));\r",
							"\r",
							"//Test if Bool is True or False\r",
							"pm.test(\"Is Mr AND United Kingdom\", function () {\r",
							"    pm.expect(hasItemDetails).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://randomuser.me/api/",
					"protocol": "https",
					"host": [
						"randomuser",
						"me"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Greater than and less than",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(jsonData.results[0].dob.age);\r",
							"\r",
							"pm.test(\"Age is greater than 30\", function () {\r",
							"    pm.expect(jsonData.results[0].dob.age).to.be.above(30);\r",
							"});\r",
							"\r",
							"pm.test(\"Age is less than 70\", function () {\r",
							"    pm.expect(jsonData.results[0].dob.age).to.be.below(70);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://randomuser.me/api/",
					"protocol": "https",
					"host": [
						"randomuser",
						"me"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Replace a character",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json().info.version;\r",
							"\r",
							"let newVal = jsonData.replace('.', '');\r",
							"\r",
							"console.log(newVal);\r",
							"console.log(newVal.length);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://randomuser.me/api/",
					"protocol": "https",
					"host": [
						"randomuser",
						"me"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Math Round",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(jsonData.bpi.GBP.rate_float);\r",
							"let numberToRound = jsonData.bpi.GBP.rate_float;\r",
							"console.log(Math.floor(numberToRound));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.coindesk.com/v1/bpi/currentprice.json",
					"protocol": "https",
					"host": [
						"api",
						"coindesk",
						"com"
					],
					"path": [
						"v1",
						"bpi",
						"currentprice.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Math Round Down with Floor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(jsonData.bpi.GBP.rate_float);\r",
							"let numberToRound = jsonData.bpi.GBP.rate_float;\r",
							"console.log(Math.floor(numberToRound));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.coindesk.com/v1/bpi/currentprice.json",
					"protocol": "https",
					"host": [
						"api",
						"coindesk",
						"com"
					],
					"path": [
						"v1",
						"bpi",
						"currentprice.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Math Round Up with Ceil",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(jsonData.bpi.GBP.rate_float);\r",
							"let numberToRound = jsonData.bpi.GBP.rate_float;\r",
							"console.log(Math.ceil(numberToRound));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.coindesk.com/v1/bpi/currentprice.json",
					"protocol": "https",
					"host": [
						"api",
						"coindesk",
						"com"
					],
					"path": [
						"v1",
						"bpi",
						"currentprice.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Math Trunc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(jsonData.bpi.GBP.rate_float);\r",
							"let numberToRound = jsonData.bpi.GBP.rate_float;\r",
							"console.log(Math.trunc(numberToRound));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.coindesk.com/v1/bpi/currentprice.json",
					"protocol": "https",
					"host": [
						"api",
						"coindesk",
						"com"
					],
					"path": [
						"v1",
						"bpi",
						"currentprice.json"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "125",
			"type": "string"
		},
		{
			"key": "talls",
			"value": ""
		}
	]
}